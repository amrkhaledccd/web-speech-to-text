{"ast":null,"code":"var _jsxFileName = \"/home/amr/IdeaProjects/speech-text/src/App.js\";\nimport React, { Component } from \"react\";\nimport { Button, Input, List, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nconst recognition = new window.webkitSpeechRecognition();\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [],\n      todoId: 0,\n      text: \"\",\n      listening: false\n    };\n\n    this.toggleListen = () => {\n      let newTodos = this.state.todos;\n\n      if (this.state.text !== \"\") {\n        newTodos = this.addTodo(this.state.text);\n      }\n\n      this.setState({\n        todos: newTodos,\n        todoId: this.state.todoId + 1,\n        listening: !this.state.listening,\n        text: \"\"\n      });\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevState.listening !== this.state.listening) {\n        this.handleListen();\n      }\n    };\n\n    this.handleListen = () => {\n      console.log(\"listening?\", this.state.listening);\n\n      if (this.state.listening) {\n        recognition.start();\n\n        recognition.onend = () => {\n          console.log(\"...continue listening...\");\n          recognition.start();\n        };\n      } else {\n        recognition.stop();\n\n        recognition.onend = () => {\n          console.log(\"Stopped listening per click\");\n        };\n      }\n\n      recognition.onstart = () => {\n        console.log(\"Listening!\");\n      };\n\n      let finalTranscript = \"\";\n\n      recognition.onresult = event => {\n        let interimTranscript = \"\";\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) finalTranscript += transcript + \" \";else interimTranscript += transcript;\n        }\n\n        console.log(\"final: \" + finalTranscript);\n        this.setState({\n          text: finalTranscript\n        });\n      };\n\n      recognition.onerror = event => {\n        console.log(\"Error occurred in recognition: \" + event.error);\n      };\n    };\n\n    this.handleClick = () => {\n      if (this.state.text !== \"\") {\n        this.addTodo(this.state.text);\n        this.setState({\n          text: \"\"\n        });\n      }\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        text: event.target.value\n      });\n    };\n\n    this.addTodo = text => {\n      const todos = this.state.todos;\n      const todo = {\n        id: this.state.todoId + 1,\n        text: text,\n        completed: false\n      };\n      const newTodos = [...todos, todo];\n      return newTodos;\n    };\n  }\n\n  render() {\n    let circleBtnType = \"\";\n\n    if (this.state.listening) {\n      circleBtnType = \"danger\";\n    }\n\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Input, {\n      placeholder: \"Say something\",\n      className: \"input\",\n      value: this.state.text,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.handleClick,\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Primary\"), React.createElement(Button, {\n      type: circleBtnType,\n      shape: \"circle\",\n      icon: \"phone\",\n      onClick: this.toggleListen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(List, {\n      dataSource: this.state.todos,\n      renderItem: todo => React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Typography.Text, {\n        mark: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"[ITEM]\"), \" \", todo.text),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/amr/IdeaProjects/speech-text/src/App.js"],"names":["React","Component","Button","Input","List","Typography","recognition","window","webkitSpeechRecognition","continous","interimResults","lang","App","state","todos","todoId","text","listening","toggleListen","newTodos","addTodo","setState","componentDidUpdate","prevProps","prevState","handleListen","console","log","start","onend","stop","onstart","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","onerror","error","handleClick","handleInputChange","target","value","todo","id","completed","render","circleBtnType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Input, List, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nconst recognition = new window.webkitSpeechRecognition();\n\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\n\nclass App extends Component {\n  state = {\n    todos: [],\n    todoId: 0,\n    text: \"\",\n    listening: false\n  };\n\n  toggleListen = () => {\n    let newTodos = this.state.todos;\n\n    if (this.state.text !== \"\") {\n      newTodos = this.addTodo(this.state.text);\n    }\n\n    this.setState({\n      todos: newTodos,\n      todoId: this.state.todoId + 1,\n      listening: !this.state.listening,\n      text: \"\"\n    });\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.listening !== this.state.listening) {\n      this.handleListen();\n    }\n  };\n\n  handleListen = () => {\n    console.log(\"listening?\", this.state.listening);\n\n    if (this.state.listening) {\n      recognition.start();\n      recognition.onend = () => {\n        console.log(\"...continue listening...\");\n        recognition.start();\n      };\n    } else {\n      recognition.stop();\n      recognition.onend = () => {\n        console.log(\"Stopped listening per click\");\n      };\n    }\n\n    recognition.onstart = () => {\n      console.log(\"Listening!\");\n    };\n\n    let finalTranscript = \"\";\n    recognition.onresult = event => {\n      let interimTranscript = \"\";\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + \" \";\n        else interimTranscript += transcript;\n      }\n\n      console.log(\"final: \" + finalTranscript);\n      this.setState({ text: finalTranscript });\n    };\n\n    recognition.onerror = event => {\n      console.log(\"Error occurred in recognition: \" + event.error);\n    };\n  };\n\n  handleClick = () => {\n    if (this.state.text !== \"\") {\n      this.addTodo(this.state.text);\n      this.setState({ text: \"\" });\n    }\n  };\n\n  handleInputChange = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  addTodo = text => {\n    const todos = this.state.todos;\n    const todo = { id: this.state.todoId + 1, text: text, completed: false };\n    const newTodos = [...todos, todo];\n\n    return newTodos;\n  };\n\n  render() {\n    let circleBtnType = \"\";\n\n    if (this.state.listening) {\n      circleBtnType = \"danger\";\n    }\n\n    return (\n      <div className=\"app\">\n        <Input\n          placeholder=\"Say something\"\n          className=\"input\"\n          value={this.state.text}\n          onChange={this.handleInputChange}\n        />\n        <Button type=\"primary\" onClick={this.handleClick} className=\"btn\">\n          Primary\n        </Button>\n        <Button\n          type={circleBtnType}\n          shape=\"circle\"\n          icon=\"phone\"\n          onClick={this.toggleListen}\n        />\n        <List\n          dataSource={this.state.todos}\n          renderItem={todo => (\n            <List.Item>\n              <Typography.Text mark>[ITEM]</Typography.Text> {todo.text}\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}