{"ast":null,"code":"var _jsxFileName = \"/Users/ams/IdeaProjects/speech-test/web-speech-to-text/src/App.js\";\nimport React, { Component } from \"react\";\nimport { Form, Row, Col, Input, Button, Icon, List, Typography, DatePicker } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nconst recognition = new window.webkitSpeechRecognition();\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      text: \"\",\n      listening: false\n    };\n\n    this.toggleListen = () => {\n      // if (this.state.text !== \"\") {\n      //   newTodos = this.addTodo(this.state.text);\n      // }\n      this.setState({\n        listening: !this.state.listening,\n        text: \"\"\n      });\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevState.listening !== this.state.listening) {\n        this.handleListen();\n      }\n    };\n\n    this.handleListen = () => {\n      console.log(\"listening?\", this.state.listening);\n\n      if (this.state.listening) {\n        recognition.start();\n\n        recognition.onend = () => {\n          console.log(\"...continue listening...\");\n          recognition.start();\n        };\n      } else {\n        recognition.stop();\n\n        recognition.onend = () => {\n          console.log(\"Stopped listening per click\");\n        };\n      }\n\n      recognition.onstart = () => {\n        console.log(\"Listening!\");\n      };\n\n      let finalTranscript = \"\";\n\n      recognition.onresult = event => {\n        let interimTranscript = \"\";\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) finalTranscript += transcript + \" \";else interimTranscript += transcript;\n        }\n\n        console.log(\"final: \" + finalTranscript);\n        this.setState({\n          text: finalTranscript\n        });\n      };\n\n      recognition.onerror = event => {\n        console.log(\"Error occurred in recognition: \" + event.error);\n      };\n    };\n  }\n\n  render() {\n    let circleBtnType = \"\";\n\n    if (this.state.listening) {\n      circleBtnType = \"danger\";\n    }\n\n    return React.createElement(Form, {\n      className: \"ant-advanced-search-form\",\n      onSubmit: this.handleSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      placeholder: \"From: City, Station Or Airport\",\n      prefix: React.createElement(Icon, {\n        type: \"global\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      placeholder: \"To: City, Station Or Airport\",\n      prefix: React.createElement(Icon, {\n        type: \"global\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"danger\",\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Col, {\n      span: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: circleBtnType,\n      shape: \"circle\",\n      icon: \"audio\",\n      onClick: this.toggleListen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ams/IdeaProjects/speech-test/web-speech-to-text/src/App.js"],"names":["React","Component","Form","Row","Col","Input","Button","Icon","List","Typography","DatePicker","recognition","window","webkitSpeechRecognition","continous","interimResults","lang","App","state","text","listening","toggleListen","setState","componentDidUpdate","prevProps","prevState","handleListen","console","log","start","onend","stop","onstart","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","onerror","error","render","circleBtnType","handleSearch","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Row, Col, Input, Button, Icon, List, Typography, DatePicker } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nconst recognition = new window.webkitSpeechRecognition();\n\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\n\nclass App extends Component {\n  state = {\n    text: \"\",\n    listening: false\n  };\n\n  toggleListen = () => {\n\n    // if (this.state.text !== \"\") {\n    //   newTodos = this.addTodo(this.state.text);\n    // }\n\n    this.setState({\n      listening: !this.state.listening,\n      text: \"\"\n    });\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.listening !== this.state.listening) {\n      this.handleListen();\n    }\n  };\n\n  handleListen = () => {\n    console.log(\"listening?\", this.state.listening);\n\n    if (this.state.listening) {\n      recognition.start();\n      recognition.onend = () => {\n        console.log(\"...continue listening...\");\n        recognition.start();\n      };\n    } else {\n      recognition.stop();\n      recognition.onend = () => {\n        console.log(\"Stopped listening per click\");\n      };\n    }\n\n    recognition.onstart = () => {\n      console.log(\"Listening!\");\n    };\n\n    let finalTranscript = \"\";\n    recognition.onresult = event => {\n      let interimTranscript = \"\";\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + \" \";\n        else interimTranscript += transcript;\n      }\n\n      console.log(\"final: \" + finalTranscript);\n      this.setState({ text: finalTranscript });\n    };\n\n    recognition.onerror = event => {\n      console.log(\"Error occurred in recognition: \" + event.error);\n    };\n  };\n\n  render() {\n    let circleBtnType = \"\";\n\n    if (this.state.listening) {\n      circleBtnType = \"danger\";\n    }\n\n    return (\n      \n        <Form className=\"ant-advanced-search-form\" onSubmit={this.handleSearch}>\n        \n          <Row gutter={24}>\n            <Col span={7} > \n              <Input\n                  size=\"large\"\n                  placeholder=\"From: City, Station Or Airport\"\n                  prefix={<Icon type=\"global\" style={{ color: 'rgba(0,0,0,.25)' }} />}/>\n            </Col>\n            <Col span={7}> \n             <Input\n                  size=\"large\"\n                  placeholder=\"To: City, Station Or Airport\"\n                  prefix={<Icon type=\"global\" style={{ color: 'rgba(0,0,0,.25)' }} />}/>\n            </Col>\n            <Col span={7}> \n                  <DatePicker size=\"large\" />\n            </Col>\n            <Col span={7}> \n                <Button type=\"danger\" size=\"large\">Search</Button>\n\n            </Col>\n            <Col span={7}> \n              <Button\n                type={circleBtnType}\n                shape=\"circle\"\n                icon=\"audio\"\n                onClick={this.toggleListen}\n              />\n            </Col>\n          </Row>\n\n        </Form>\n\n        \n      );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}